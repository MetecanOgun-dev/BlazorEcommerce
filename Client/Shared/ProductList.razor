@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{ 
    <ul class="list-unstyled">
        @foreach (var item in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@item.Id">
                        <img class="media-img" src="@item.ImageUrl" alt="@item.Title">
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@item.Id">
                        <h4>@item.Title</h4>
                    </a>
                    <p>@item.Description</p>
                    <h5 class="price">
                        $@GetPrice(item)
                    </h5>
                </div>
            </li>
        }
    </ul>
}



@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }
    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPrice(Product product)
    {

        var variants = product.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        }
        else if(variants.Count == 1)        {

            return variants[0].Price.ToString();
        }
        decimal minPrice = variants.Min(p => p.Price);
        return "Starting at " + minPrice.ToString();
    }
}
